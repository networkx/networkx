"""
==========
Dendrogram
==========

Dendrogram from community detection by Girvan-Newman

This example demonstrates how to use the method
`dendrogram_from_girvan_newman.py` to plot a dendrogram from community
detection performed by the Girvan--Newman algorithm.

The Girvan--Newman algorithm detects communities by progressively removing
edges from the original graph. The algorithm removes the "most valuable" edge,
traditionally the edge with the highest betweenness centrality, at each step.
As the graph breaks down into pieces, the tightly knit community structure is
exposed and the result can be depicted as a dendrogram.

We use the `scipy.cluster.hierarchy.dendrogram` function to draw dendrograms.
It receives as input a matrix which encodes the hierarchical clustering
to be rendered as a dendrogram. This `agglomerative matrix` is typically
generated by an algorithm similar to `scipy.cluster.hierarchy.linkage`.
For this example, we want to use a community detection algorithm.

The `networkx.community.girvan_newman` function generates a list of partitions
representing the communities. Then the `networkx.community.agglomerative_matrix`
function computes the agglomerative matrix basedon those partitions. Finally
we draw the dendogram using the `scipy.cluster.hierarchy.dendrogram` function.
"""

# sphinx_gallery_thumbnail_number = 2

import matplotlib.pyplot as plt
import networkx as nx

nx_comm = nx.community

# %%
# 1) Generate a simple network.

# nodes and edges
nodes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
edges = [
    (0, 1),
    (0, 10),
    (0, 11),
    (1, 3),
    (3, 2),
    (3, 4),
    (3, 5),
    (4, 2),
    (4, 5),
    (5, 2),
    (5, 6),
    (5, 7),
    (5, 8),
    (8, 9),
]

# graph
G = nx.Graph()
G.add_nodes_from(nodes)
G.add_edges_from(edges)

# info
nn = nx.number_of_nodes(G)
ne = nx.number_of_edges(G)
print("The graph G has:\t %d nodes" % nn)
print("The graph G has:\t %d edges" % ne)

# %%
# 2) Draw the network.
nx.draw_networkx(G)
plt.show()

# %%
# 3) Perform community detection using Girvan-Newman.

# create the list of prtitions detected by Girvan-Newman
partitions = nx_comm.girvan_newman_partitions(G)

# print the list of partitions
for i, part in enumerate(partitions):
    print("partition number %d:\t" % i, part)

print(
    "\nN.B: number of partitions: %d\t is equal to\t (number of nodes - 1): %d - 1"
    % (len(partitions), nn)
)

# %%
# 4) Create the 'agglomerative matrix' associated to the community detection.

# agglomerative matrix
agglomerative_mat = nx_comm.agglomerative_matrix(G, partitions)

print("Agglomerative matrix:\n", agglomerative_mat)


# %%
# 5) Use the 'agglomerative matrix' to plot the dendrogram.
#    To do the plot use 'scipy.cluster.hierarchy.dendrogram'.

from scipy.cluster.hierarchy import dendrogram

# plot dendrogram

dendro = dendrogram(agglomerative_mat)
plt.show()

# %%
# 6) Find the 'best partitions' among all the partitions detected by Girvan-Newman.
#    The best partition is selected according to its modularity.
#    (Using 'networkx.community.modularity').

# best_partition, position of best partition in the list 'partitions'
bp_G, idx_bp_G = nx_comm.girvan_newman_best_partition(G, partitions)

print("The best community partition of the graph G is:\n\t", bp_G)
print(
    '\nWhich is the one with index = %d among the partitions in the list "partitions".'
    % (idx_bp_G)
)


# Plot the dendrogram highlighting the best partition.

# How many communities in the best partition?
n_communities_bp = len(bp_G)
print("The best partition splits the graph G into %d communities." % n_communities_bp)

# Distance of the best partition from the ground level
dist_bp = nx_comm.distance_of_partition(agglomerative_mat, n_communities_bp)
print(
    "The best partition, which splits the graph G into %d communities, has a distance from the ground level equal to:\t %d"
    % (n_communities_bp, dist_bp)
)

# Plot the dendrogram highlighting the communities which compose the best partition
dendro_bp = dendrogram(agglomerative_mat, color_threshold=dist_bp)
plt.show()
