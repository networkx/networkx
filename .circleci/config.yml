# See: https://circleci.com/docs/2.0/language-python/

version: 2.1
jobs:
  documentation:
    docker:
      - image: cimg/python:3.12

    steps:
      - checkout

      - run:
          name: Update apt-get
          command: |
            sudo apt update

      - run:
          name: Install Graphviz
          command: |
            sudo apt install graphviz libgraphviz-dev

      - run:
          name: Install pysal dependencies
          command: |
            sudo apt install libspatialindex-dev

      - restore_cache:
          keys:
            - pip-cache-v1

      - run:
          name: Install Python dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            # Install trusted backends, but not their dependencies.
            # We only need to use the "networkx.backend_info" entry-point.
            # This is the nightly wheel for nx-cugraph.
            pip install nx-cugraph-cu11 --extra-index-url https://pypi.anaconda.org/rapidsai-wheels-nightly/simple --no-deps --pre
            # Development version of GraphBLAS backend
            pip install git+https://github.com/python-graphblas/graphblas-algorithms.git@main --no-deps
            # Development version of nx-parallel backend
            pip install git+https://github.com/networkx/nx-parallel.git@main --no-deps
            pip list

      - save_cache:
          key: pip-cache-v1
          paths:
            - ~/.cache/pip

      - run:
          name: Install
          command: |
            source venv/bin/activate
            pip install -e '.[default,test,extra,example,doc]'

      - run:
          name: Build docs
          command: |
            # NOTE: bad interaction w/ blas multithreading on circleci
            export OMP_NUM_THREADS=1
            source venv/bin/activate
            make -C doc/ html

      - store_artifacts:
          path: doc/build/html

  image:
    docker:
      - image: cimg/python:3.12

    steps:
      - checkout

      - run:
          name: Install Python dependencies
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install pytest-mpl  # NOTE: specified here to avoid confusing conda
            pip list

      - run:
          name: Install
          command: |
            source venv/bin/activate
            pip install -e .[default,test]

      - run:
          name: Test NetworkX drawing
          command: |
            source venv/bin/activate
            pytest --mpl --mpl-generate-summary=html --mpl-results-path=results --pyargs networkx.drawing

      - store_artifacts:
          path: results

workflows:
  documentation_and_image_comparison:
    jobs:
      - documentation
      - image
