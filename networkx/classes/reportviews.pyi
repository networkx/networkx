# Stubs for networkx.classes.reportviews (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Dict, Generic, Iterator, Tuple, Type

from _typeshed import Incomplete

from networkx.classes.graph import Graph, _Edge, _NBunch, _Node

class NodeView(Generic[_Node]):
    def __init__(self, graph: Graph[_Node]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_Node]: ...
    def __getitem__(self, n: _Node) -> _Node: ...
    def __contains__(self, n: _Node) -> bool: ...
    def __call__(
        self, data: bool | str = ..., default: Any = ...
    ) -> NodeDataView[_Node]: ...
    def data(
        self, data: bool | str = ..., default: Any = ...
    ) -> NodeDataView[_Node]: ...

class NodeDataView(Generic[_Node]):
    def __init__(
        self,
        nodedict: Dict[str, Any],
        data: bool | str = ...,
        default: Any = ...,
    ) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Tuple[_Node, Any]]: ...
    def __contains__(self, n: _Node) -> bool: ...
    def __getitem__(self, n: _Node) -> Any: ...

class DiDegreeView(Generic[_Node]):
    def __init__(
        self,
        G: Graph[_Node],
        nbunch: _NBunch[_Node] = ...,
        weight: None | bool | str = ...,
    ) -> None: ...
    def __call__(
        self, nbunch: _NBunch[_Node] = ..., weight: None | bool | str = ...
    ) -> DiDegreeView[_Node]: ...
    def __getitem__(self, n: _Node) -> int | float: ...
    def __iter__(self) -> Iterator[Tuple[_Node, int | float]]: ...
    def __len__(self) -> int: ...

class DegreeView(DiDegreeView[_Node], Generic[_Node]): ...
class OutDegreeView(DiDegreeView[_Node], Generic[_Node]): ...
class InDegreeView(DiDegreeView[_Node], Generic[_Node]): ...
class MultiDegreeView(DiDegreeView[_Node], Generic[_Node]): ...
class DiMultiDegreeView(DiDegreeView[_Node], Generic[_Node]): ...
class InMultiDegreeView(DiDegreeView[_Node], Generic[_Node]): ...
class OutMultiDegreeView(DiDegreeView[_Node], Generic[_Node]): ...

class OutEdgeDataView(Generic[_Node]):
    def __init__(
        self,
        viewer: Any,
        nbunch: _NBunch[_Node] = ...,
        data: bool | str = ...,
        default: Any = ...,
    ) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Tuple[_Node, _Node] | Tuple[_Node, _Node, Any]]: ...
    def __contains__(self, e: _Edge[_Node]) -> bool: ...

class EdgeDataView(OutEdgeDataView[_Node], Generic[_Node]): ...
class InEdgeDataView(OutEdgeDataView[_Node], Generic[_Node]): ...

class OutMultiEdgeDataView(OutEdgeDataView[_Node], Generic[_Node]):
    def __init__(
        self,
        viewer: Any,
        nbunch: _NBunch[_Node] = ...,
        data: bool | str = ...,
        keys: Incomplete = ...,
        default: Any = ...,
    ) -> None: ...
    keys: Incomplete

class MultiEdgeDataView(OutEdgeDataView[_Node], Generic[_Node]): ...
class InMultiEdgeDataView(OutEdgeDataView[_Node], Generic[_Node]): ...

class OutEdgeView(Generic[_Node]):
    def __init__(self, G: Graph[_Node]) -> None: ...
    dataview: Type[OutEdgeDataView]
    def __len__(self) -> int: ...
    def __iter__(
        self,
    ) -> Iterator[Tuple[_Node, _Node] | Tuple[_Node, _Node, Dict[str, Any]]]: ...
    def __contains__(self, e: _Edge[_Node]) -> bool: ...
    def __getitem__(self, e: _Edge[_Node]) -> Dict[str, Any]: ...
    def __call__(
        self, nbunch: _NBunch[_Node] = ..., data: bool | str = ..., default: Any = ...
    ) -> OutEdgeDataView[_Node]: ...
    def data(
        self, data: bool | str = ..., default: Any = ..., nbunch: _NBunch[_Node] = ...
    ) -> OutEdgeDataView[_Node]: ...

class EdgeView(OutEdgeView[_Node], Generic[_Node]): ...
class InEdgeView(OutEdgeView[_Node], Generic[_Node]): ...

class OutMultiEdgeView(OutEdgeView[_Node], Generic[_Node]):
    def __call__(self, nbunch: _NBunch[_Node] = ..., data: bool | str = ..., keys: Incomplete = ..., default: Any = ...) -> OutEdgeDataView[_Node]: ...  # type: ignore
    def data(self, data: bool | str = ..., keys: Incomplete = ..., default: Any = ..., nbunch: _NBunch[_Node] = ...) -> OutEdgeDataView[_Node]: ...  # type: ignore

class MultiEdgeView(OutMultiEdgeView[_Node], Generic[_Node]): ...
class InMultiEdgeView(OutMultiEdgeView[_Node], Generic[_Node]): ...
