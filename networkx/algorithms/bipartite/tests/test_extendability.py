import networkx as nx
from networkx.algorithms.bipartite import extendability


class TestBipartiteExtendability:

    @staticmethod
    def test_1():
        nodes = ['1', '2', '3',
                 '4', '5', '6']
        edges = [('1', '4'), ('1', '5'),
                 ('2', '5'), ('2', '6'),
                 ('3', '4'), ('3', '5'), ('3', '6')]
        graph = nx.Graph()
        graph.add_nodes_from(nodes)
        graph.add_edges_from(edges)
        k = extendability.find_extendability(graph)
        assert k == 1

    @staticmethod
    def test_2():
        nodes = ['1', '2', '3', '4',
                 '5', '6', '7', '8']
        edges = [('1', '5'), ('1', '6'), ('1', '7'),
                 ('2', '5'), ('2', '6'), ('2', '8'),
                 ('3', '6'), ('3', '7'), ('3', '8'),
                 ('4', '5'), ('4', '7'), ('4', '8')]
        graph = nx.Graph()
        graph.add_nodes_from(nodes)
        graph.add_edges_from(edges)
        k = extendability.find_extendability(graph)
        assert k == 2

    @staticmethod
    def test_3():
        nodes = ['1', '2', '3', '4', '5',
                 '6', '7', '8', '9', '10']
        edges = [('1', '6'), ('1', '7'), ('1', '8'), ('1', '9'),
                 ('2', '6'), ('2', '7'), ('2', '8'), ('2', '10'),
                 ('3', '6'), ('3', '8'), ('3', '9'), ('3', '10'),
                 ('4', '7'), ('4', '8'), ('4', '9'), ('4', '10'),
                 ('5', '6'), ('5', '7'), ('5', '9'), ('5', '10')]
        graph = nx.Graph()
        graph.add_nodes_from(nodes)
        graph.add_edges_from(edges)
        k = extendability.find_extendability(graph)
        assert k == 3

    @staticmethod
    def test_4():
        nodes = ['1', '2', '3', '4', '5', '6', '7',
                 '8', '9', '10', '11', '12', '13', '14']
        edges = [('8', '1'), ('8', '2'), ('8', '3'), ('8', '4'), ('8', '5'),
                 ('9', '1'), ('9', '2'), ('9', '3'), ('9', '4'), ('9', '7'),
                 ('10', '1'), ('10', '2'), ('10', '3'), ('10', '4'), ('10', '6'),
                 ('11', '1'), ('11', '2'), ('11', '5'), ('11', '6'), ('11', '7'),
                 ('12', '1'), ('12', '3'), ('12', '5'), ('12', '6'), ('12', '7'),
                 ('13', '2'), ('13', '4'), ('13', '5'), ('13', '6'), ('13', '7'),
                 ('14', '3'), ('14', '4'), ('14', '5'), ('14', '6'), ('14', '7')]
        graph = nx.Graph()
        graph.add_nodes_from(nodes)
        graph.add_edges_from(edges)
        k = extendability.find_extendability(graph)
        assert k == 4

    @staticmethod
    def test_5():
        nodes = ['1', '2', '3', '4', '5', '6', '7',
                 '8', '9', '10', '11', '12', '13', '14']
        edges = [('8', '1'), ('8', '2'), ('8', '3'), ('8', '4'), ('8', '5'), ('8', '6'),
                 ('9', '1'), ('9', '2'), ('9', '3'), ('9', '4'), ('9', '5'), ('9', '7'),
                 ('10', '1'), ('10', '2'), ('10', '3'), ('10', '4'), ('10', '6'), ('10', '7'),
                 ('11', '1'), ('11', '2'), ('11', '3'), ('11', '5'), ('11', '6'), ('11', '7'),
                 ('12', '1'), ('12', '2'), ('12', '4'), ('12', '5'), ('12', '6'), ('12', '7'),
                 ('13', '1'), ('13', '3'), ('13', '4'), ('13', '5'), ('13', '6'), ('13', '7'),
                 ('14', '2'), ('14', '3'), ('14', '4'), ('14', '5'), ('14', '6'), ('14', '7')]
        graph = nx.Graph()
        graph.add_nodes_from(nodes)
        graph.add_edges_from(edges)
        k = extendability.find_extendability(graph)
        assert k == 5

    @staticmethod
    def test_6():
        nodes = ['1', '2', '3', '4', '5', '6', '7', '8',
                 '9', '10', '11', '12', '13', '14', '15', '16']
        edges = [('9', '1'), ('9', '2'), ('9', '3'), ('9', '4'), ('9', '5'), ('9', '6'), ('9', '7'),
                 ('10', '1'), ('10', '2'), ('10', '3'), ('10', '4'), ('10', '5'), ('10', '6'), ('10', '8'),
                 ('11', '1'), ('11', '2'), ('11', '3'), ('11', '4'), ('11', '5'), ('11', '7'), ('11', '8'),
                 ('12', '1'), ('12', '2'), ('12', '3'), ('12', '4'), ('12', '6'), ('12', '7'), ('12', '8'),
                 ('13', '1'), ('13', '2'), ('13', '3'), ('13', '5'), ('13', '6'), ('13', '7'), ('13', '8'),
                 ('14', '1'), ('14', '2'), ('14', '4'), ('14', '5'), ('14', '6'), ('14', '7'), ('14', '8'),
                 ('15', '1'), ('15', '3'), ('15', '4'), ('15', '5'), ('15', '6'), ('15', '7'), ('15', '8'),
                 ('16', '2'), ('16', '3'), ('16', '4'), ('16', '5'), ('16', '6'), ('16', '7'), ('16', '8')]
        graph = nx.Graph()
        graph.add_nodes_from(nodes)
        graph.add_edges_from(edges)
        k = extendability.find_extendability(graph)
        assert k == 6

    @staticmethod
    def test_7():
        nodes = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']
        edges = [('1', '11'), ('1', '12'), ('1', '13'), ('1', '14'),
                 ('1', '15'), ('1', '16'), ('1', '17'), ('1', '18'),
                 ('2', '11'), ('2', '12'), ('2', '13'), ('2', '14'),
                 ('2', '15'), ('2', '16'), ('2', '17'), ('2', '19'),
                 ('3', '11'), ('3', '12'), ('3', '13'), ('3', '14'),
                 ('3', '15'), ('3', '16'), ('3', '17'), ('3', '20'),
                 ('4', '11'), ('4', '12'), ('4', '13'), ('4', '14'), ('4', '15'),
                 ('4', '16'), ('4', '17'), ('4', '18'), ('4', '19'), ('4', '20'),
                 ('5', '11'), ('5', '12'), ('5', '13'), ('5', '14'), ('5', '15'),
                 ('5', '16'), ('5', '17'), ('5', '18'), ('5', '19'), ('5', '20'),
                 ('6', '11'), ('6', '12'), ('6', '13'), ('6', '14'), ('6', '15'),
                 ('6', '16'), ('6', '17'), ('6', '18'), ('6', '19'), ('6', '20'),
                 ('7', '11'), ('7', '12'), ('7', '13'), ('7', '14'), ('7', '15'),
                 ('7', '16'), ('7', '17'), ('7', '18'), ('7', '19'), ('7', '20'),
                 ('8', '11'), ('8', '12'), ('8', '13'), ('8', '14'), ('8', '15'),
                 ('8', '16'), ('8', '17'), ('8', '18'), ('8', '19'), ('8', '20'),
                 ('9', '11'), ('9', '12'), ('9', '13'), ('9', '14'), ('9', '15'),
                 ('9', '16'), ('9', '17'), ('9', '18'), ('9', '19'), ('9', '20'),
                 ('10', '11'), ('10', '12'), ('10', '13'), ('10', '14'), ('10', '15'),
                 ('10', '16'), ('10', '17'), ('10', '18'), ('10', '19'), ('10', '20')]
        graph = nx.Graph()
        graph.add_nodes_from(nodes)
        graph.add_edges_from(edges)
        k = extendability.find_extendability(graph)
        assert k == 7

