# After changing this file, check it on:
#   http://lint.travis-ci.org/
#
language: python

python:
  - "2.7"
  - "3.2"
  - "3.3"
  - "3.4"

matrix:
  fast_finish: true

  include:
    - python: "pypy"
      env: PYTHON_VM=pypy OPTIONAL_DEPS=no
    - python: "3.4"
      env: PYTHON_VM=cpython OPTIONAL_DEPS=source
    - python: "2.7"
      env: PYTHON_VM=cpython OPTIONAL_DEPS=source
    - python: "2.7"
      env: PYTHON_VM=ipy OPTIONAL_DEPS=no

  allow_failures:
    - env: PYTHON_VM=ipy OPTIONAL_DEPS=no

env:
  global:
    # Install from wheels *only*.
    - PIPINSTALL="pip install -v --use-wheel --no-index --find-links=http://sunpy.cadair.com/wheelhouse/"
    - NXOPTDEPS=""

  matrix:
    - PYTHON_VM=cpython OPTIONAL_DEPS=pip
    - PYTHON_VM=cpython OPTIONAL_DEPS=no

before_install:
  ### Prepare the system to install prerequisites or dependencies
  - uname -a
  - printenv
  - sudo apt-get update -qq
  - if [[ "${PYTHON_VM}" != ipy ]]; then
      pip install --upgrade setuptools;
      pip install --upgrade pip;
      pip install wheel;
      pip --version;
    else
      sudo apt-get install -qq mono-devel;
      pushd ..;
      curl -L -o IronPython-2.7.5b2.zip "http://download-codeplex.sec.s-msft.com/Download/Release?ProjectName=ironpython&DownloadId=815751&FileTime=130455203824130000&Build=20919";
      unzip IronPython-2.7.5b2.zip;

      curl -L -o decorator-3.4.0.tar.gz https://pypi.python.org/packages/source/d/decorator/decorator-3.4.0.tar.gz;
      tar xf decorator-3.4.0.tar.gz;
      cp decorator-3.4.0/src/decorator.py IronPython-2.7.5b2/Lib;

      curl -L -o enum34-1.0.tar.gz https://pypi.python.org/packages/source/e/enum34/enum34-1.0.tar.gz;
      tar xf enum34-1.0.tar.gz;
      cp enum34-1.0/enum/enum.py IronPython-2.7.5b2/Lib;

      curl -L -o nose-1.3.3.tar.gz https://pypi.python.org/packages/source/n/nose/nose-1.3.3.tar.gz;
      tar xf nose-1.3.3.tar.gz;
      cp -R nose-1.3.3/nose IronPython-2.7.5b2/Lib;

      popd;
    fi

install:
  ### Install any prerequisites or dependencies necessary to run the build.

  # Skipping pydot (not 3.x compatible)
  # Skipping gdal (errors during pip installs)
  - if [[ "${OPTIONAL_DEPS}" =~ pip|source ]]; then
      sudo apt-get install graphviz libsuitesparse-dev libxml2-dev libxslt1-dev;
    fi
  - if [[ "${TRAVIS_PYTHON_VERSION}${OPTIONAL_DEPS}" =~ 2\..(pip|source) ]]; then
      pip install pygraphviz;
    fi
  - if [ "${OPTIONAL_DEPS}" == "pip" ]; then
      pip install --use-wheel pyyaml pyparsing;
      $PIPINSTALL numpy scipy matplotlib Cython;
    fi

  # Try to install latest and greatest from source.
  - if [ "${OPTIONAL_DEPS}" == "source" ]; then
      sudo apt-get install -qq libatlas-dev libatlas-base-dev liblapack-dev gfortran;
      pip install --upgrade pyyaml pyparsing numpy scipy matplotlib Cython;
    fi

  # Install stuff that depends on Cython.
  - if [[ "${OPTIONAL_DEPS}" =~ pip|source ]]; then
      pip install scikits.sparse lxml;
    fi

before_script:
  ### Use this to prepare your build for testing
  - if [[ "${PYTHON_VM}" != ipy ]]; then
      pip install --upgrade nose coverage coveralls;
    fi

script:
  - printenv PWD
  - if [[ "${PYTHON_VM}" != ipy ]]; then
      pip install .;
      export NX_INSTALL=`pip show networkx | grep Location | awk '{print $2"/networkx"}'`;
    fi

  # nose 1.3.0 does not tell coverage to only cover the requested
  # package (except during the report).  So to restrict coverage, we must
  # inform coverage through the .coveragerc file.
  - if [[ "${PYTHON_VM}" != ipy ]]; then
      cp .coveragerc $NX_INSTALL;
      cp setup.cfg $NX_INSTALL;
    fi

  # Move to new directory so that networkx is not imported from repository.
  # Why? Because we want the tests to make sure that NetworkX was installed
  # correctly. Example: setup.py might not have included some submodules.
  # Testing from the git repository cannot catch a mistake like that.
  #
  # Export current directory for logs.
  - if [[ "${PYTHON_VM}" != ipy ]]; then
      cd $NX_INSTALL;
      printenv PWD;
    fi

      # Run nosetests.
  - if [[ "${PYTHON_VM}" != ipy ]]; then
      nosetests --verbosity=2 --with-coverage --cover-package=networkx;
    else
      mono ../IronPython-2.7.5b2/ipy.exe -X:ExceptionDetail -X:FullFrames -c 'from nose import main; main()' \--verbosity=2;
    fi

after_success:
  # We must run coveralls from the git repo. But we ran tests from the
  # installed directory. The .coverage file looks like it contains absolute
  # paths, but coveralls does not seem to care.
  # Actually coveralls does care, because when you want to see the coverage
  # results coveralls cannot find the file. And shows the following error:
  # The file "/home/travis/virtualenv/python3.4.0/lib/python3.4/site-packages/networkx/readwrite/graphml.py" isn't available on GitHub.
  # Hence the output needs to be fixed by replacing the path to files in the
  # virtualenv to paths in the source repo.
  #
  # Report coverage for 2.7 and 3.4 only.
  - if [[ "${PYTHON_VM}" != ipy ]]; then
      cp .coverage $TRAVIS_BUILD_DIR;
      cd $TRAVIS_BUILD_DIR;
      python fixcoverage.py "$VIRTUAL_ENV/lib/python.*/site-packages/networkx/" "$TRAVIS_BUILD_DIR/networkx/";
      if [[ "${TRAVIS_PYTHON_VERSION}" =~ 2\.7|3\.4 ]]; then
        coveralls;
      fi;
    fi

notifications:
  email: false
